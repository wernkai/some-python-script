# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestRedeem():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_redeem(self):
    # Test name: Redeem
    # Step # | name | target | value
    # 1 | open | https://genshin.hoyoverse.com/en/gift | 
    self.driver.get("https://genshin.hoyoverse.com/en/gift")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | click | css=.login__btn > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".login__btn > span").click()
    # 4 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 5 | click | css=.el-dialog__body | 
    self.driver.implicitly_wait(10)
    searchBox = self.driver.find_element(By.CSS_SELECTOR, ".el-dialog__body")
    placeText = searchBox.get_attribute("placeholder")#.equals("Username/Email")
    print(placeText)
    # if placeText:
    #   # self.driver.find_element(By.CSS_SELECTOR, ".el-dialog__body").click()
    #   print('correct')
    # else:
    #   print('incorrect')

    # # 6 | type | css=.is-focused > .el-input__inner | wernkai95@gmail.com
    # self.driver.find_element(By.CSS_SELECTOR, ".is-focused > .el-input__inner").send_keys("wernkai95@gmail.com")
    # # 7 | type | css=.is-focused > .el-input__inner | wernkai2012
    # self.driver.find_element(By.CSS_SELECTOR, ".is-focused > .el-input__inner").send_keys("wernkai2012")
    # # 8 | click | css=.el-button | 
    # self.driver.find_element(By.CSS_SELECTOR, ".el-button").click()
    # # 9 | mouseOver | css=.el-button | 
    # element = self.driver.find_element(By.CSS_SELECTOR, ".el-button")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element).perform()
    # # 10 | mouseOut | css=.el-button | 
    # self.vars["window_handles"] = self.driver.window_handles
    # # 11 | storeWindowHandle | root | 
    # [object Object]
    # # 12 | selectWindow | handle=${win6709} | 
    # self.vars["win6709"] = self.wait_for_window(2000)
    # # 13 | close |  | 
    # self.vars["root"] = self.driver.current_window_handle
    # # 14 | selectWindow | handle=${root} | 
    # self.driver.switch_to.window(self.vars["win6709"])
    # # 15 | click | css=.cdkey-select__btn | 
    # self.driver.close()
    # # 16 | click | css=.cdkey-select__option:nth-child(3) | 
    # self.driver.switch_to.window(self.vars["root"])
    # # 17 | click | id=cdkey__code | 
    # self.driver.find_element(By.CSS_SELECTOR, ".cdkey-select__btn").click()
    # # 18 | type | id=cdkey__code | 1234567890
    # self.driver.find_element(By.CSS_SELECTOR, ".cdkey-select__option:nth-child(3)").click()
    # # 19 | click | css=.cdkey-form__submit | 
    # self.driver.find_element(By.ID, "cdkey__code").click()
    # # 20 | mouseOver | css=.cdkey-form__submit | 
    # self.driver.find_element(By.ID, "cdkey__code").send_keys("1234567890")
    # # 21 | mouseOut | css=.cdkey-form__submit | 
    # self.driver.find_element(By.CSS_SELECTOR, ".cdkey-form__submit").click()
    # element = self.driver.find_element(By.CSS_SELECTOR, ".cdkey-form__submit")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element).perform()
    # element = self.driver.find_element(By.CSS_SELECTOR, "body")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element, 0, 0).perform()
  

# redeemCode = ['','','']

start = TestRedeem()
start.setup_method(method='')
start.test_redeem()
start.teardown_method(method='')